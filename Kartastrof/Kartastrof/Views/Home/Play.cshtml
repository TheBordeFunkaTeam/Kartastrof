@model Kartastrof.Models.Tbl_Capital
@{
    ViewBag.Title = "Play";
}


<audio id="successSound" src="../Sounds/success.mp3" preload="auto"></audio>
<audio id="failSound" src="../Sounds/fail.mp3" preload="auto"></audio>

<div class="row" id="loading-mask"><div class="col-md-4 col-md-offset-4 text-center" style="padding-top: 15%;"><h3 id="loading-text">Loading map...</h3><img id="image-loader" src="../Images2/ajax-loader.gif" alt="Initializing map..." /></div></div>

<div id="page-content" style="display: none;">

    <div id="score-cost-fact" class="score-cost"><p><span class="fa fa-diamond"></span> 5</p></div>
    <div id="clue-container">
        <button id="new-clue-button" type="button" class="btn btn-primary"><span class="fa fa-stack-exchange"></span>  Get fact</button>
        <div id="clue-cont-wrapper">
            <div id="clue-cont">
                <p>This clue gives you some fact about the capital.</p>
            </div>
        </div>

        <button id="show-total-clue" type="button" class="btn btn-primary"><span class="glyphicon glyphicon-chevron-down"></span></button>
        <div id="total-clue-container">

        </div>
    </div>

    <div id="score-cost-move" class="score-cost"><p><span class="fa fa-diamond"></span> 40</p></div>
    <div id="move-map-container">
        <button id="move-map-btn" type="button" class="btn btn-primary"><span class="fa fa-arrows"></span>  Move</button>

        <div id="move-map-cont-wrapper">
            <div id="move-map-cont">
                <p>This clue moves the map towards the right answer. Can only be used once.</p>
            </div>
        </div>
    </div>

    <div id="score-container">
        <button id="score-btn" type="button" class="btn btn-primary"><span class="glyphicon glyphicon-hand-right"></span>  Guess!</button>

        <div id="score-cont-wrapper">
            <div id="score-cont">

                <span class="fa fa-diamond fa-2x"></span>


                <p id="score-text">100</p>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">


            <div id="map-wrapper" class="col-md-12">
                <div id="map-canvas" class="col-md-12"></div>
                @*
                    <p><strong>Rätt svar:</strong></p>
                    <p>Huvudstad: @Model.Ca_Name</p>
                    <p>Latitud: @Model.Ca_Latitude</p>
                    <p>Longitud: @Model.Ca_Longitude</p>*@


                @*<div id="clue-container" class="col-md-3">

                        <button id="new-clue-button" type="button" class="btn btn-primary col-md-12">Give me a clue</button>

                        <div id="clue-cont-wrapper" class="col-md-12">
                            <div id="clue-cont">
                                <p>hej</p>
                            </div>
                        </div>

                    </div>*@

            </div>
        </div>
    </div>
</div>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAWfYmXiTeQmVSIsx1mNapkZHJAYvQ-eFI"></script>
    <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobox/src/infobox.js"></script>
    <script type="text/javascript">

        $('#map-wrapper').css("height", (jQuery(window).height() - $('.navbar').height()) + "px");

            $('#new-clue-button').on('click', function (e) {
                $.ajax({
                    type: "POST",
                    url: "GetClue",
                    data: { test: "lat" },
                    success: function (response) {

                        if (response.substring(0, 5) == "http:") {
                            $('#clue-cont').html("<div id='pic-clue' class='pic-div'></div>");
                            $('#total-clue-container').html("<div id='pic-total-clue' class='pic-div'></div>");
                            $('.pic-div').css("background-image", "url(" + response + ")");
                            $('#pic-clue').css("height", "400px");
                            $('#pic-total-clue').css("height", "200px");


                            $('<img/>').attr('src', response).load(function () {
                                s = { w: this.width, h: this.height };
                                //Landscape
                                var prop;
                                if (s.w > s.h) {
                                    prop = s.w / 400;
                                }
                                else {//Portrait
                                    prop = s.h / 400;
                                }
                                $('#pic-clue').css("background-size", (s.w / prop) + "px " + (s.h / prop) + "px");
                                $('#pic-total-clue').css("background-size", (s.w / prop * 0.5) + "px " + (s.h / prop * 0.5) + "px");
                                $('.pic-div').css("background-repeat", "no-repeat");
                                $('.pic-div').css("background-position", "center");
                                //compLogo.style.backgroundRepeat = "no-repeat";
                                //compLogo.style.backgroundPosition = "center";


                            });

                       

                        }
                        else {
                            $('#clue-cont').html(response);
                            $('#total-clue-container').html($('#total-clue-container').html() + " " + response);
                        }
                    
                    },
                });


                $.ajax({
                    type: "POST",
                    url: "ReducePoints",
                    data: {clueCost: "5"},
                    success: function (response) {
                        $('#score-text').html(response);
                    },
                });


            });


            var stockholm = new google.maps.LatLng(59.32522, 18.07002);
            var marker;
            var map;

            function CenterControl(controlDiv, map) {

                // Set CSS for the control border
                var controlUI = document.createElement('div');
                controlUI.className = "mapButton";
                controlUI.style.backgroundColor = '#fff';
                controlUI.style.border = '2px solid #fff';
                controlUI.style.borderRadius = '3px';
                controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
                controlUI.style.cursor = 'pointer';
                controlUI.style.marginBottom = '22px';
                controlUI.style.textAlign = 'center';
                controlUI.title = 'Click to get the marker';
                controlDiv.appendChild(controlUI);

                // Set CSS for the control interior
                var controlText = document.createElement('div');
                controlText.style.color = 'rgb(25,25,25)';
                controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
                controlText.style.fontSize = '16px';
                controlText.style.lineHeight = '38px';
                controlText.style.paddingLeft = '5px';
                controlText.style.paddingRight = '5px';
                controlText.innerHTML = "<span class='glyphicon glyphicon-map-marker'></span> Get marker";
                controlUI.appendChild(controlText);

                // Setup the click event listeners
                google.maps.event.addDomListener(controlUI, 'click', function () {
                    //Center marker on current map view
                    var c = map.getCenter();
                    var zoom = map.getZoom();
                    var latChange = 105 * (Math.pow(0.52, zoom));
                    var lngChange = -500 * (Math.pow(0.5, zoom));
                    var newLat = parseFloat(c.lat()) + parseFloat(latChange);
                    var newLng = parseFloat(c.lng()) + parseFloat(lngChange)
                    marker.setPosition(new google.maps.LatLng(newLat, newLng));
                });

            }
         
    function initialize() {

        var mapOptions = {
            center: stockholm,
            zoom: 3,
            mapTypeControl: false
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        // Create the DIV to hold the control and
        // call the CenterControl() constructor passing
        // in this DIV.
        var centerControlDiv = document.createElement('div');
        var centerControl = new CenterControl(centerControlDiv, map);

        centerControlDiv.index = 1;
        map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(centerControlDiv);

        // Create the DIV to hold the control and
        // call the CenterControl() constructor passing
        // in this DIV.
        var guessButtonDiv = document.createElement('div');

        guessButtonDiv.index = 1;
        map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(guessButtonDiv);

        var markerStartPos = new google.maps.LatLng(stockholm.lat() + 15, stockholm.lng()-80);

        marker = new google.maps.Marker({
            map: map,
            draggable: true,
            animation: google.maps.Animation.DROP,
            position: markerStartPos,
            icon: '../Images2/pin.png'
        });

            //Clue container
            var boxContent = document.getElementById('clue-container');
            var ibOptions = {
                content: boxContent
                , boxStyle: {
                }
                , isHidden: false
                , pixelOffset: new google.maps.Size(330, 0)
            };

            var ib = new InfoBox(ibOptions);
            ib.open(map, marker);

            google.maps.event.addListener(marker, 'click', function () {
                if (ib.getMap() == null) {
                    ib.open(map, this);
                } else {
                    ib.close(map, this);
                }
            });

            //Score fact container 
            var factScoreCont = document.getElementById('score-cost-fact');
            var factScoreOptions = {
                content: factScoreCont
                , boxStyle: {
                }
                , isHidden: false
                , pixelOffset: new google.maps.Size(680, -20)
            };

            var factScoreCont = new InfoBox(factScoreOptions);
            factScoreCont.open(map, marker);

            google.maps.event.addListener(marker, 'click', function () {
                if (factScoreCont.getMap() == null) {
                    factScoreCont.open(map, this);
                } else {
                    factScoreCont.close(map, this);
                }
            });

            $('#total-clue-container').slideUp();
            $('#show-total-clue').on('click', function (e) {
                $('#total-clue-container').slideToggle();
                $(this).html() == '<span class="glyphicon glyphicon-chevron-up"></span>' ? $(this).html('<span class="glyphicon glyphicon-chevron-down"></span>') : $(this).html('<span class="glyphicon glyphicon-chevron-up"></span>');
            });

            //Move container
            var boxContent2 = document.getElementById('move-map-container');
            var ibOptions2 = {
                content: boxContent2
                , boxStyle: {
                }
                , isHidden: false
                , pixelOffset: new google.maps.Size(120, 0)
            };

            var ib2 = new InfoBox(ibOptions2);
            ib2.open(map, marker);

            google.maps.event.addListener(marker, 'click', function () {
                if (ib2.getMap() == null) {
                    ib2.open(map, this);
                } else {
                    ib2.close(map, this);
                }
            });

            //Score move container
            var scoreCont = document.getElementById('score-cost-move');
            var scoreOptions = {
                content: scoreCont
                , boxStyle: {
                }
                , isHidden: false
                , pixelOffset: new google.maps.Size(270, -20)
            };

            var scoreCont = new InfoBox(scoreOptions);
            scoreCont.open(map, marker);

            google.maps.event.addListener(marker, 'click', function () {
                if (scoreCont.getMap() == null) {
                    scoreCont.open(map, this);
                } else {
                    scoreCont.close(map, this);
                }
            });

            //Score container
            var boxContent3 = document.getElementById('score-container');
            var ibOptions3 = {
                content: boxContent3
                , boxStyle: {
                }
                , isHidden: false
                , pixelOffset: new google.maps.Size(0, 0)
            };

            var ib3 = new InfoBox(ibOptions3);
            ib3.open(map, marker);

            google.maps.event.addListener(marker, 'click', function () {
                if (ib3.getMap() == null) {
                    ib3.open(map, this);
                } else {
                    ib3.close(map, this);
                }
            });



           // google.maps.event.addListener(marker, 'click', toggleBounce);
            //google.maps.event.addListener(marker, 'click', getCoordinates);

            $('#move-map-btn').on('click', function (e) {

                //Get correct answer
                var lat = "@Model.Ca_Latitude";
                var lng = "@Model.Ca_Longitude";
                lat = lat.replace(/,/g, '.');
                lng = lng.replace(/,/g, '.');

                //Center map on correct answer
                map.setCenter(new google.maps.LatLng(lat, lng));
                map.setZoom(5);

                //Change marker position
                var c = map.getCenter();
                var zoom = map.getZoom();
                var latChange = 105 * (Math.pow(0.52, zoom));
                var lngChange = -500 * (Math.pow(0.5, zoom));
                var newLat = parseFloat(c.lat()) + parseFloat(latChange);
                var newLng = parseFloat(c.lng()) + parseFloat(lngChange);
                marker.setPosition(new google.maps.LatLng(newLat, newLng));

                $(this).prop('disabled', true);

                $.ajax({
                    type: "POST",
                    url: "ReducePoints",
                    data: { clueCost: "40" },
                    success: function (response) {
                        $('#score-text').html(response);
                    },
                });
            });

        //google.maps.event.addListener(marker, 'click', toggleBounce);
        //google.maps.event.addListener(marker, 'click', getCoordinates);
    }

    

    $('#score-btn').on('click', function (e) {
        var lat = getLat();
        var lng = getLng();

        $.ajax({
            type: "POST",
            url: "Submit",
            data: { lat: lat, lng: lng },
            success: function (response) {
                if (response == "true") {
                    $.ajax({
                        type: "POST",
                        url: "GetMessage",
                        success: function (response) {
                            document.getElementById('successSound').play();
                            bootbox.dialog({

                                message: response,
                                title: "Result",
                                onEscape: function () { },
                                show: true,
                                backdrop: true,
                                closeButton: true,
                                animate: true,
                                className: "my-modal",
                                buttons: {

                                    // For each key inside the buttons object...

                                    success: {
                                        label: "Play again",
                                        className: "btn-success",
                                        callback: function () {
                                            location.reload();
                                        }
                                    },

                                    danger: {
                                        label: "End game",
                                        className: "btn-danger",
                                        callback: function () {
                                            //load home page?
                                        }
                                    },
                                }
                            });
                        }
                    });

                } else {
                    document.getElementById('failSound').play();

                    bootbox.dialog({

                        message: "Wrong answer!",
                        title: "Result",
                        onEscape: function () { },
                        show: true,
                        backdrop: true,
                        closeButton: true,
                        animate: true,
                        className: "my-modal",
                        buttons: {

                            // For each key inside the buttons object...

                            success: {
                                label: "Continue guessing",
                                className: "btn-success",
                                callback: function () {

                                }
                            },

                            danger: {
                                label: "End game",
                                className: "btn-danger",
                                callback: function () {
                                    //load home page?
                                }
                            },
                        }
                    });
                }
            }

        });
    });
    

    function toggleBounce() {

        if (marker.getAnimation() != null) {
            marker.setAnimation(null);
        } else {
            marker.setAnimation(google.maps.Animation.BOUNCE);
        }
    }

    function getCoordinates() {
        var lat = marker.getPosition().lat();
        var lng = marker.getPosition().lng();
        alert("Latitude: " + lat + "Longitude" + lng);
    }

    function getLat() {
        return marker.getPosition().lat();
    }

    function getLng() {
        return marker.getPosition().lng();
    }

    google.maps.event.addDomListener(window, 'load', initialize);


</script>

<script language="javascript" type="text/javascript">
    window.onload = function () {
        //document.getElementById('loading-mask').style.display = 'none';
        $('#loading-mask').delay(1100).fadeOut();

        $('#page-content').fadeIn();


    }
</script>

    <style>
        body{
            padding-bottom: 0px;
        }
        .container-fluid {
            padding-right: 15px;
            padding-left: 15px;
            margin-right: auto;
            margin-left: auto;
        }
        #map-wrapper {
            /*position: relative;*/
            height: 600px;
            padding: 0;
        }

        #map-canvas {
            height: 100%;
            
        }
        #clue-container {
            background-color: rgba(0, 0, 0, 0.8);
            width: 400px;
            border-radius: 8px;
        }
        #clue-cont-wrapper {
            width: 100%;
            padding: 0%;
        }
        #clue-cont {
            color: white;
            font-size: 1.5em;
            text-align: center;
            padding-top: 5%;
        }

        #total-clue-container {
            width: 100%;
            height: 220px;
            padding: 3%;
            color: white;
            font-size: 1.5em;
            overflow-y: scroll;
        }
        #show-total-clue {
            width: 100%;
            border-radius: 0px; 
            padding: 0px;
            font-size: 11px !important;
        }

        #glyph-down{
            font-size: 0.5em;
            padding: 0;
        } 
        #move-map-container {
            background-color: rgba(0, 0, 0, 0.8);
            width: 200px;
            border-radius: 8px;
        }
        #move-map-cont-wrapper {
            width: 100%;
            padding: 2%;
            display: table;
        }
        #move-map-cont {
            display: table-cell;
            vertical-align: middle;
            font-size: 1.5em;
            color: white;
            text-align: center;
            padding-top: 5%;
        }

        #score-container {
            background-color: rgba(0, 0, 0, 0.8);
            width: 110px;
            border-radius: 8px;
        }
        #score-cont-wrapper {
            width: 100%;
            padding: 1%;
        }
        #score-cont {
            font-size: 1.2em;
            color: white;
            text-align: center;
            padding-top: 5%;
            margin: 0px;
        }
        #score-text {
            font-size: 1.5em;
            padding: 0%;
        }
        .score-cost {
            width: 50px;
            height: 20px;
            padding: 1%;
            color: white;
            background-color: rgba(0, 0, 0, 0.8);
            border-radius: 8px 8px 0px 0px;
            font-size: 1.2em;
            text-align: center;
        } 
        .infoBox img {
            display: none;
        } 
        .btn-primary {
            background-color: #FB4F4F !important;
            font-size: 20px !important;
            border: none !important;
            margin-top: 5% !important;
        }
        #new-clue-button, #move-map-btn, #score-btn {
            margin-top: 0% !important;
            width: 100%;
        }
        #new-clue-button, #move-map-btn {
            border-radius: 8px 0px 8px 8px;
        }

        .glyphicon-map-marker {
            color: #FE7569;
        }

        .glyph-orange {
            color: orange;
        }

        .bootbox-body {
            font-size: 30px !important;
        }

        .modal-title    {
            font-size: 25px !important;
        }


        .mapButton:hover {
            background-color: #E6E6E6 !important;
            border-color: #E6E6E6 !important;
        }

        #loading-mask {
            background-color: lightsteelblue;
            left: 0;
            padding:0;
            margin: 0 auto;
            width:100%;
            height:100%;
            position:fixed;
            top: 8%;
            width: 100%;
            z-index: 9999;
        }

    </style>
